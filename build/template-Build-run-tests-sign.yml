# template-Build-run-tests-sign.yml

steps:
- script: echo $(BuildConfiguration)
  displayName: 'display Build Configuration'

- script: echo $(MicrosoftIdentityModelVersion)
  displayName: 'display MicrosoftIdentityModelVersion'

- task: UseDotNet@2
  displayName: 'Use .NET Core sdk 2.x'
  inputs:
    version: 2.x
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: UseDotNet@2
  displayName: 'Use .NET Core sdk 6.x'
  inputs:
    version: 6.x
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: UseDotNet@2
  displayName: 'Use .NET Core sdk 8.x'
  inputs:
    version: 8.x
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: UseDotNet@2
  displayName: 'Use .Net Core SDK 9.x'
  inputs:
    version: 9.0.100-preview.4.24267.66
    includePreviewVersions: true
  condition: eq(variables['TargetNet9'], 'True')

- task: DotNetCoreCLI@2
  displayName: 'dotnet --list-sdks'
  inputs:
    command: custom
    custom: '--list-sdks'

- task: PowerShell@2
  displayName: 'Verify error messages are all used.'
  inputs:
    filePath: $(Build.SourcesDirectory)\$(WilsonSourceDirectory)Tools\VerifyResourceUsage.ps1

- powershell: |
    regedit /s .\build\strongNameBypass.reg
  displayName: 'Strong Name Bypass'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'build'
    projects: '$(WilsonSourceDirectory)Product.proj'
    arguments: '/r:True /p:Configuration=$(BuildConfiguration) /p:Platform="Any CPU" /verbosity:m /p:SourceLinkCreate=true'

- task: PowerShell@2
  displayName: 'Run Tests'
  inputs:
    targetType: filePath
    filePath: ./$(WilsonSourceDirectory)runTests.ps1
    arguments: '-buildType $(BuildConfiguration) -runningInCI $True'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'XUnit'
    testResultsFiles: '**/*.trx'
    searchFolder: '$(Agent.TempDirectory)'

- task: PublishCodeCoverageResults@2
  condition: succeededOrFailed()
  inputs:
    summaryFileLocation: '$(Agent.TempDirectory)/**/*.cobertura.xml'

- task: CopyFiles@2
  displayName: 'Copy Files to: [staging]\ProductBinaries'
  inputs:
    SourceFolder: $(WilsonSourceDirectory)src
    Contents: |
      **\bin\$(BuildConfiguration)\**\Microsoft.IdentityModel.*.dll
      **\bin\$(BuildConfiguration)\**\Microsoft.IdentityModel.*.pdb
      **\bin\$(BuildConfiguration)\**\System.IdentityModel.Tokens.Jwt.dll
      **\bin\$(BuildConfiguration)\**\System.IdentityModel.Tokens.Jwt.pdb
    TargetFolder: '$(Build.ArtifactStagingDirectory)\ProductBinaries'
  condition: and(succeeded(), eq(variables['PipelineType'], 'legacy'))

- task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@2
  displayName: 'Run PoliCheck'
  inputs:
    targetType: F
    result: PoliCheck.xml
    optionsFC: 0
    optionsXS: 0
    optionsHMENABLE: 0
  condition: and(succeeded(), eq(variables['PipelineType'], 'legacy'))

- task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@3
  displayName: 'Run CredScan'
  inputs:
    outputFormat: pre
    suppressionsFile: 'build/credscan-exclusion.json'
    debugMode: false
  condition: and(succeeded(), eq(variables['PipelineType'], 'legacy'))

- task: securedevelopmentteam.vss-secure-development-tools.build-task-roslynanalyzers.RoslynAnalyzers@2
  displayName: 'Run Roslyn Analyzers'
  condition: and(eq(variables['TargetNet8'], 'False'), eq(variables['PipelineType'], 'legacy'))

- task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@4
  displayName: 'Run BinSkim'
  inputs:
    AnalyzeSymPath: '$(Build.ArtifactStagingDirectory)\ProductBinaries'
    AnalyzeVerbose: true
    AnalyzeHashes: true
  condition: and(succeeded(), eq(variables['PipelineType'], 'legacy'))

- task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@3
  displayName: 'Publish Security Analysis Logs'
  continueOnError: true

- task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@2
  displayName: 'Post SDL Analysis'
  continueOnError: true

#Sign Wilson 7x task group
- template: template-sign-wilson.yaml

- task: DotNetCoreCLI@2
  displayName: 'Pack libraries'
  inputs:
    command: 'pack'
    arguments: '--no-restore'
    packDirectory: '$(Build.SourcesDirectory)\artifacts'
    nobuild: true
    verbosityPack: 'Minimal'
    configuration: $(BuildConfiguration)
    packagesToPack: '$(WilsonSourceDirectory)Product.proj'
    feedsToUse: 'config'
    nugetConfigPath: Nuget.config
    externalFeedCredentials: 'Internal Analyzers'

- task: onebranch.pipeline.signing@1
  displayName: 'Sign Packages with OneBranch'
  inputs:
    command: 'sign'
    signing_profile: 'CP-401405'
    files_to_sign: '**/*.nupkg'
    search_root: '$(Build.SourcesDirectory)\artifacts'
  condition: and(succeeded(), eq(variables['PipelineType'], 'onebranch'))

# Copy all packages out to staging
- task: CopyFiles@2
  displayName: 'Copy Files from $(Build.SourcesDirectory) to: $(Build.ArtifactStagingDirectory)\packages'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: '**\*nupkg'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\packages'
    flattenFolders: true
  condition: and(succeeded(), eq(variables['PipelineType'], 'onebranch'))

- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection'
  inputs:
    scanType: 'Register'
    verbosity: 'Verbose'
    alertWarningLevel: 'High'
  condition: and(succeeded(), eq(variables['PipelineType'], 'legacy'))

- task: PublishSymbols@2
  displayName: 'Publish symbols on symweb (cross publish)'
  inputs:
    SearchPattern: '**\bin\**\*.IdentityModel.*'
    SymbolServerType: TeamServices
    TreatNotIndexedAsWarning: true

- task: securedevelopmentteam.vss-secure-development-tools.build-task-uploadtotsa.TSAUpload@2
  displayName: 'TSA upload to Codebase: WILSON Stamp: Azure'
  inputs:
    GdnPublishTsaOnboard: false
    GdnPublishTsaConfigFile: '$(Build.SourcesDirectory)/build/tsaConfig.json'
  continueOnError: true
  condition: and(succeeded(), eq(variables['PipelineType'], 'legacy'))

- task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
  displayName: 'Manifest Generator'
  inputs:
    BuildDropPath: '$(Build.SourcesDirectory)\$(WilsonSourceDirectory)src'
    ManifestDirPath: '$(Build.SourcesDirectory)\artifacts'

- task: NuGetCommand@2
  displayName: 'Upload NuGet Package to VSTS NuGet'
  condition: eq(variables['MicrosoftIdentityModelVersion'], '')
  inputs:
    command: push
    packagesToPush: '$(Build.Repository.LocalPath)\artifacts\*.nupkg'
    publishVstsFeed: '46419298-b96c-437f-bd4c-12c8df7f868d'
    allowPackageConflicts: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish NuGet Package Artifact'
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)\artifacts'
    ArtifactName: '$(Build.BuildNumber)-nuget-package'

- task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
  displayName: 'Clean Agent Directories'
  condition: and(succeeded(), eq(variables['PipelineType'], 'legacy'))
