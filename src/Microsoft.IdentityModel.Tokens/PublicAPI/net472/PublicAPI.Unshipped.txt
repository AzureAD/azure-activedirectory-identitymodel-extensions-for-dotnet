Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy
Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.Decrypt(byte[] input, bool fOAEP) -> byte[]
Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.Encrypt(byte[] input, bool fOAEP) -> byte[]
Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.RSACryptoServiceProviderProxy(System.Security.Cryptography.RSACryptoServiceProvider rsa) -> void
Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.SignData(byte[] input, object hash) -> byte[]
Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.VerifyData(byte[] input, object hash, byte[] signature) -> bool
Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.VerifyDataWithLength(byte[] input, int offset, int length, object hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithmName, byte[] signature) -> bool
override Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.DecryptValue(byte[] input) -> byte[]
override Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.Dispose(bool disposing) -> void
override Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.EncryptValue(byte[] input) -> byte[]
override Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.ExportParameters(bool includePrivateParameters) -> System.Security.Cryptography.RSAParameters
override Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.ImportParameters(System.Security.Cryptography.RSAParameters parameters) -> void
override Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.KeyExchangeAlgorithm.get -> string
override Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.SignatureAlgorithm.get -> string
Microsoft.IdentityModel.Tokens.EcdhKeyExchangeProvider
Microsoft.IdentityModel.Tokens.EcdhKeyExchangeProvider.EcdhKeyExchangeProvider(Microsoft.IdentityModel.Tokens.SecurityKey privateKey, Microsoft.IdentityModel.Tokens.SecurityKey publicKey, string alg, string enc) -> void
Microsoft.IdentityModel.Tokens.EcdhKeyExchangeProvider.GenerateKdf(string apu = null, string apv = null) -> Microsoft.IdentityModel.Tokens.SecurityKey
Microsoft.IdentityModel.Tokens.EcdhKeyExchangeProvider.KeyDataLen.get -> int
Microsoft.IdentityModel.Tokens.EcdhKeyExchangeProvider.KeyDataLen.set -> void
override Microsoft.IdentityModel.Tokens.SecurityTokenException.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
static Microsoft.IdentityModel.Tokens.JsonWebKeyConverter.ConvertFromECDsaSecurityKey(Microsoft.IdentityModel.Tokens.ECDsaSecurityKey key) -> Microsoft.IdentityModel.Tokens.JsonWebKey

